type Approval @entity {
  id: ID!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
}

type ApprovalForAll @entity {
  id: ID!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
}

type ApproveWinery @entity {
  id: ID!
  wallet: Bytes! # address
}

type FeeWithdraw @entity {
  id: ID!
  to: Bytes! # address
}

type Payout @entity {
  id: ID!
  to: Bytes! # address
  tokenId: BigInt! # uint256
  amount: BigInt! # uint256
}

type RegisterWinery @entity {
  id: ID!
  wallet: Bytes! # address
}

type RoleAdminChanged @entity {
  id: ID!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
}

type RoleGranted @entity {
  id: ID!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
}

type RoleRevoked @entity {
  id: ID!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
}

type Transfer @entity {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
}

type Whine @entity {
  id: ID!
  tokenID: BigInt!
  tokenURI: String!
  listed: Boolean!
  owner: User
  image: String
  winery: String
  vintage: String
  varietal: String
  royalties: BigInt
  approvedAddress: Bytes
  approvalUpdatedBlock: BigInt
}

type User @entity {
  id: ID!
  Whines: [Whine!] @derivedFrom(field: "owner")
}
